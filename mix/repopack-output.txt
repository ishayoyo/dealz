This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-09-21T07:00:59.174Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.cjs
.gitignore
app/components/BottomNavigation.tsx
app/components/CategoryBar.tsx
app/components/CategoryGrid.tsx
app/components/DealCard.tsx
app/components/DealGrid.tsx
app/components/DealModal.tsx
app/components/Footer.tsx
app/components/Header.tsx
app/components/PostDealForm.tsx
app/components/PostDealModal.tsx
app/components/UserProfile.tsx
app/entry.client.tsx
app/entry.server.tsx
app/lib/utils.ts
app/root.tsx
app/routes/_index.tsx
app/routes/admin.deals.tsx
app/routes/admin.tsx
app/routes/login.tsx
app/routes/profile.tsx
app/routes/signup.tsx
app/routes/toggle-login.tsx
app/sessions.ts
app/tailwind.css
package.json
postcss.config.js
README.md
remix.config.js
tailwind.config.js
tailwind.config.ts
tsconfig.json
vite.config.js
vite.config.js.timestamp-1726860760683-1638d460209c.mjs
vite.config.mjs
vite.config.ts
vite.config.ts.timestamp-1726859134184-d93de3f2dc511.mjs

================================================================
Repository Files
================================================================

================
File: .eslintrc.cjs
================
/**
 * This is intended to be a basic starting point for linting in your app.
 * It relies on recommended configs out of the box for simplicity, but you can
 * and should modify this configuration to best suit your team's needs.
 */

/** @type {import('eslint').Linter.Config} */
module.exports = {
  root: true,
  parserOptions: {
    ecmaVersion: "latest",
    sourceType: "module",
    ecmaFeatures: {
      jsx: true,
    },
  },
  env: {
    browser: true,
    commonjs: true,
    es6: true,
  },
  ignorePatterns: ["!**/.server", "!**/.client"],

  // Base config
  extends: ["eslint:recommended"],

  overrides: [
    // React
    {
      files: ["**/*.{js,jsx,ts,tsx}"],
      plugins: ["react", "jsx-a11y"],
      extends: [
        "plugin:react/recommended",
        "plugin:react/jsx-runtime",
        "plugin:react-hooks/recommended",
        "plugin:jsx-a11y/recommended",
      ],
      settings: {
        react: {
          version: "detect",
        },
        formComponents: ["Form"],
        linkComponents: [
          { name: "Link", linkAttribute: "to" },
          { name: "NavLink", linkAttribute: "to" },
        ],
        "import/resolver": {
          typescript: {},
        },
      },
    },

    // Typescript
    {
      files: ["**/*.{ts,tsx}"],
      plugins: ["@typescript-eslint", "import"],
      parser: "@typescript-eslint/parser",
      settings: {
        "import/internal-regex": "^~/",
        "import/resolver": {
          node: {
            extensions: [".ts", ".tsx"],
          },
          typescript: {
            alwaysTryTypes: true,
          },
        },
      },
      extends: [
        "plugin:@typescript-eslint/recommended",
        "plugin:import/recommended",
        "plugin:import/typescript",
      ],
    },

    // Node
    {
      files: [".eslintrc.cjs"],
      env: {
        node: true,
      },
    },
  ],
};

================
File: .gitignore
================
node_modules

/.cache
/build
.env

================
File: app/components/BottomNavigation.tsx
================
import { Link } from "@remix-run/react";

export default function BottomNavigation({ className }: { className?: string }) {
  return (
    <nav className={`fixed bottom-0 left-0 right-0 bg-white shadow-sm dark:bg-gray-800 ${className}`}>
      <div className="flex justify-around py-2">
        <Link to="/" className="text-gray-600 dark:text-gray-300">Home</Link>
        <Link to="/search" className="text-gray-600 dark:text-gray-300">Search</Link>
        <Link to="/post" className="text-gray-600 dark:text-gray-300">Post Deal</Link>
        <Link to="/notifications" className="text-gray-600 dark:text-gray-300">Notifications</Link>
        <Link to="/profile" className="text-gray-600 dark:text-gray-300">Profile</Link>
      </div>
    </nav>
  );
}

================
File: app/components/CategoryBar.tsx
================
import { Link } from "@remix-run/react";

const categories = [
  "Electronics", "Fashion", "Home", "Beauty", "Sports", "Kids", "Auto", "Books", "Grocery", "Travel"
];

export default function CategoryBar() {
  return (
    <div className="flex overflow-x-auto hide-scrollbar">
      <div className="flex space-x-4 p-4">
        {categories.map((category) => (
          <Link
            key={category}
            to={`/category/${category.toLowerCase()}`}
            className="px-4 py-2 bg-white text-gray-800 rounded-full shadow hover:bg-gray-100 transition-colors whitespace-nowrap"
          >
            {category}
          </Link>
        ))}
      </div>
    </div>
  );
}

================
File: app/components/CategoryGrid.tsx
================
import { Link } from "@remix-run/react";

const categories = [
  { id: "1", name: "Electronics", icon: "üñ•Ô∏è", dealCount: 42 },
  { id: "2", name: "Fashion", icon: "üëö", dealCount: 38 },
  { id: "3", name: "Home", icon: "üè°", dealCount: 29 },
  { id: "4", name: "Beauty", icon: "üíÑ", dealCount: 25 },
  { id: "5", name: "Sports", icon: "‚öΩ", dealCount: 31 },
  { id: "6", name: "Kids", icon: "üß∏", dealCount: 20 },
  { id: "7", name: "Auto", icon: "üöó", dealCount: 15 },
  { id: "8", name: "Books", icon: "üìö", dealCount: 33 },
  { id: "9", name: "Grocery", icon: "üçé", dealCount: 27 },
  { id: "10", name: "Travel", icon: "‚úàÔ∏è", dealCount: 18 },
];

export default function CategoryGrid() {
  return (
    <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 lg:grid-cols-5 gap-4">
      {categories.map((category) => (
        <Link
          key={category.id}
          to={`/category/${category.id}`}
          className="flex flex-col items-center justify-center p-4 bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-300 ease-in-out"
        >
          <span className="text-3xl mb-2">{category.icon}</span>
          <span className="text-sm font-medium text-gray-800 text-center">{category.name}</span>
          <span className="text-xs text-indigo-600 mt-1">{category.dealCount} deals</span>
        </Link>
      ))}
    </div>
  );
}

================
File: app/components/DealCard.tsx
================
import { useState } from 'react';
import { Link } from '@remix-run/react';
import DealModal from './DealModal';

interface DealCardProps {
  id: string;
  title: string;
  imageUrl: string;
  price: string;
  originalPrice: string;
  store: string;
  upvotes: number;
  postedBy: string;
  postedByProfilePic: string;
  description: string;
  followers: number;
  purchases: number;
  dealUrl: string;
}

export default function DealCard({ 
  id, 
  title, 
  imageUrl, 
  price, 
  originalPrice, 
  store, 
  upvotes, 
  postedBy, 
  postedByProfilePic,
  description, 
  followers, 
  purchases, 
  dealUrl 
}: DealCardProps) {
  const [isModalOpen, setIsModalOpen] = useState(false);

  return (
    <>
      <div 
        className="bg-white rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-300 ease-in-out cursor-pointer"
        onClick={() => setIsModalOpen(true)}
      >
        <img src={imageUrl} alt={title} className="w-full h-48 object-cover" />
        <div className="p-4">
          <h3 className="font-semibold text-lg mb-2 line-clamp-2">{title}</h3>
          <p className="text-sm text-gray-500 mb-2">{store}</p>
          <div className="flex justify-between items-center">
            <div>
              <span className="text-lg font-bold text-indigo-600">{price}</span>
              <span className="text-sm text-gray-500 line-through ml-2">{originalPrice}</span>
            </div>
            <span className="text-sm bg-indigo-100 text-indigo-800 px-2 py-1 rounded-full">{upvotes} upvotes</span>
          </div>
          <div className="flex items-center mt-2">
            <img src={postedByProfilePic} alt={postedBy} className="w-6 h-6 rounded-full mr-2" />
            <p className="text-xs text-gray-500">Posted by {postedBy}</p>
          </div>
        </div>
      </div>

      <DealModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        id={id}
        title={title}
        imageUrl={imageUrl}
        price={price}
        originalPrice={originalPrice}
        store={store}
        upvotes={upvotes}
        postedBy={postedBy}
        postedByProfilePic={postedByProfilePic}
        description={description}
        followers={followers}
        purchases={purchases}
        dealUrl={dealUrl}
      />
    </>
  );
}

================
File: app/components/DealGrid.tsx
================
import DealCard from "./DealCard";

// Mock data for demonstration
const deals = [
  { 
    id: "1", 
    title: "50% off on Amazon Echo Dot", 
    imageUrl: "https://picsum.photos/seed/1/300/200", 
    price: "$24.99",
    originalPrice: "$49.99",
    store: "Amazon", 
    upvotes: 120,
    postedBy: "DealHunter123",
    postedByProfilePic: "https://picsum.photos/seed/user1/100/100",
    description: "Get the latest Amazon Echo Dot at half price! Limited time offer.",
    followers: 45,
    purchases: 78,
    dealUrl: "https://www.amazon.com/echo-dot-deal"
  },
  // Add more deals here with the postedByProfilePic property
];

export default function DealGrid() {
  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6">
      {deals.map((deal) => (
        <DealCard key={deal.id} {...deal} />
      ))}
    </div>
  );
}

================
File: app/components/DealModal.tsx
================
import React, { useState } from 'react';
import { Link } from '@remix-run/react';

interface DealModalProps {
  isOpen: boolean;
  onClose: () => void;
  id: string;
  title: string;
  imageUrl: string;
  price: string;
  originalPrice: string;
  store: string;
  upvotes: number;
  postedBy: string;
  postedByProfilePic: string;
  description: string;
  followers: number;
  purchases: number;
  dealUrl: string;
}

interface Comment {
  id: string;
  user: string;
  userProfilePic: string;
  content: string;
  timestamp: string;
  replies?: Comment[];
}

export default function DealModal({
  isOpen,
  onClose,
  title,
  imageUrl,
  price,
  originalPrice,
  store,
  upvotes,
  postedBy,
  postedByProfilePic,
  description,
  followers,
  purchases,
  dealUrl
}: DealModalProps) {
  const [isFollowingDeal, setIsFollowingDeal] = useState(false);
  const [userUpvote, setUserUpvote] = useState(0);
  const [comment, setComment] = useState('');

  if (!isOpen) return null;

  const handleFollowDeal = () => setIsFollowingDeal(!isFollowingDeal);
  const handleVote = (vote: number) => setUserUpvote(userUpvote === vote ? 0 : vote);
  const handleCommentSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log('Comment submitted:', comment);
    setComment('');
  };

  const discount = Math.round((1 - parseFloat(price.replace('$', '')) / parseFloat(originalPrice.replace('$', ''))) * 100);

  // Fake comments data
  const fakeComments: Comment[] = [
    {
      id: '1',
      user: 'DealFinder42',
      userProfilePic: 'https://picsum.photos/seed/user1/50/50',
      content: "Great deal! I just bought one and it works perfectly.",
      timestamp: '2 hours ago',
    },
    {
      id: '2',
      user: 'BargainHunter',
      userProfilePic: 'https://picsum.photos/seed/user2/50/50',
      content: "Has anyone used this before? Is it worth the price?",
      timestamp: '1 hour ago',
      replies: [
        {
          id: '2-1',
          user: 'TechExpert',
          userProfilePic: 'https://picsum.photos/seed/user3/50/50',
          content: "I've been using it for a month now. Definitely worth it at this price!",
          timestamp: '30 minutes ago',
        },
      ],
    },
    {
      id: '3',
      user: 'SavvyShopper',
      userProfilePic: 'https://picsum.photos/seed/user4/50/50',
      content: "Thanks for sharing! Just ordered mine.",
      timestamp: '45 minutes ago',
    },
    {
      id: '4',
      user: 'FrugalFred',
      userProfilePic: 'https://picsum.photos/seed/user5/50/50',
      content: "Does anyone know how long this deal will last?",
      timestamp: '20 minutes ago',
    },
  ];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50 overflow-y-auto">
      <div className="bg-white rounded-xl shadow-2xl max-w-6xl w-full mx-auto my-8 flex flex-col lg:flex-row">
        {/* Left Column - Image and CTA */}
        <div className="lg:w-2/5 relative">
          <img src={imageUrl} alt={title} className="w-full h-full object-cover rounded-t-xl lg:rounded-l-xl lg:rounded-tr-none" />
          <div className="absolute top-4 left-4 bg-red-500 text-white px-3 py-1 rounded-full font-bold text-lg">
            {discount}% OFF
          </div>
          <button 
            onClick={onClose}
            className="absolute top-4 right-4 bg-white rounded-full p-2 text-gray-600 hover:text-gray-900 transition-colors"
          >
            <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          <div className="absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black to-transparent p-6">
            <div className="flex justify-between items-end">
              <div>
                <span className="text-4xl font-bold text-white">{price}</span>
                <span className="text-lg text-gray-300 line-through ml-2">{originalPrice}</span>
              </div>
              <button 
                className="bg-green-500 text-white py-3 px-6 rounded-lg hover:bg-green-600 transition-colors text-lg font-semibold"
                onClick={() => window.open(dealUrl, '_blank')}
              >
                Get This Deal
              </button>
            </div>
          </div>
        </div>

        {/* Right Column - Content */}
        <div className="lg:w-3/5 p-6 lg:p-8 overflow-y-auto max-h-[80vh] bg-white rounded-b-xl lg:rounded-r-xl lg:rounded-bl-none">
          <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center mb-4">
            <h2 className="text-2xl lg:text-3xl font-bold mb-3 lg:mb-0 text-gray-800">{title}</h2>
            <div className="flex items-center space-x-4">
              <span className="text-sm bg-blue-100 text-blue-800 px-3 py-1 rounded-full">
                {purchases} bought
              </span>
              <div className="flex items-center space-x-2">
                <button 
                  onClick={() => handleVote(1)}
                  className={`p-1 rounded ${userUpvote === 1 ? 'text-blue-500' : 'text-gray-400'}`}
                >
                  <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 15l7-7 7 7" />
                  </svg>
                </button>
                <span className="font-semibold text-gray-700">{upvotes}</span>
              </div>
            </div>
          </div>

          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <img src={postedByProfilePic} alt={postedBy} className="w-10 h-10 rounded-full mr-3" />
              <span className="text-sm text-gray-600">Posted by <span className="font-semibold">{postedBy}</span></span>
            </div>
            <button 
              onClick={handleFollowDeal}
              className={`px-4 py-2 rounded-lg text-sm font-semibold ${
                isFollowingDeal ? 'bg-gray-200 text-gray-800' : 'bg-blue-500 text-white'
              } transition-colors`}
            >
              {isFollowingDeal ? 'Following Deal' : 'Follow Deal'}
            </button>
          </div>

          <p className="text-gray-600 mb-4">{description}</p>

          <div className="text-gray-600 text-sm mb-6">
            Available at: <a href={dealUrl} target="_blank" rel="noopener noreferrer" className="text-blue-500 hover:underline">{store}</a>
          </div>

          <form onSubmit={handleCommentSubmit} className="mb-6">
            <textarea
              value={comment}
              onChange={(e) => setComment(e.target.value)}
              className="w-full px-3 py-2 text-gray-700 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
              rows={3}
              placeholder="Leave a comment..."
            ></textarea>
            <button 
              type="submit"
              className="mt-2 px-4 py-2 bg-blue-500 text-white rounded-lg hover:bg-blue-600 transition-colors"
            >
              Post Comment
            </button>
          </form>

          {/* Comments Section */}
          <div className="space-y-4">
            <h3 className="text-lg font-semibold text-gray-800">Comments</h3>
            {fakeComments.map((comment) => (
              <div key={comment.id} className="border-b border-gray-200 pb-4">
                <div className="flex items-start space-x-3">
                  <img src={comment.userProfilePic} alt={comment.user} className="w-8 h-8 rounded-full" />
                  <div>
                    <div className="flex items-center space-x-2">
                      <span className="font-semibold text-gray-800">{comment.user}</span>
                      <span className="text-xs text-gray-500">{comment.timestamp}</span>
                    </div>
                    <p className="text-gray-600 mt-1">{comment.content}</p>
                    {comment.replies && (
                      <div className="mt-3 ml-6 space-y-3">
                        {comment.replies.map((reply) => (
                          <div key={reply.id} className="flex items-start space-x-3">
                            <img src={reply.userProfilePic} alt={reply.user} className="w-6 h-6 rounded-full" />
                            <div>
                              <div className="flex items-center space-x-2">
                                <span className="font-semibold text-gray-800">{reply.user}</span>
                                <span className="text-xs text-gray-500">{reply.timestamp}</span>
                              </div>
                              <p className="text-gray-600 mt-1">{reply.content}</p>
                            </div>
                          </div>
                        ))}
                      </div>
                    )}
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/components/Footer.tsx
================
export default function Footer() {
  return (
    <footer className="bg-white shadow-sm dark:bg-gray-800 mt-auto">
      <div className="mx-auto max-w-7xl px-4 py-6 sm:px-6 lg:px-8">
        <p className="text-center text-sm text-gray-500 dark:text-gray-400">
          ¬© 2024 DealzMix. All rights reserved.
        </p>
      </div>
    </footer>
  );
}

================
File: app/components/Header.tsx
================
import { Link } from "@remix-run/react";
import { useState } from "react";
import PostDealModal from "./PostDealModal";

export default function Header() {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [isPostDealModalOpen, setIsPostDealModalOpen] = useState(false);

  const toggleLogin = () => {
    setIsLoggedIn(!isLoggedIn);
  };

  return (
    <header className="bg-white shadow-md">
      <div className="container mx-auto px-4 py-4 flex justify-between items-center">
        <Link to="/" className="text-2xl font-bold text-indigo-600">DealzMix</Link>
        <div className="flex-grow mx-4 flex justify-center">
          <form className="relative w-1/2 max-w-md">
            <input
              type="text"
              placeholder="Search for deals..."
              className="w-full py-2 px-4 pr-10 rounded-lg border border-gray-300 focus:outline-none focus:ring-2 focus:ring-indigo-600 focus:border-transparent"
            />
            <button type="submit" className="absolute right-3 top-1/2 transform -translate-y-1/2">
              <svg className="w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </button>
          </form>
        </div>
        <nav>
          <ul className="flex space-x-4 items-center">
            {isLoggedIn && (
              <li>
                <button
                  onClick={() => setIsPostDealModalOpen(true)}
                  className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors"
                >
                  Post a Deal
                </button>
              </li>
            )}
            {isLoggedIn ? (
              <>
                <li>
                  <Link to="/profile" className="text-gray-600 hover:text-indigo-600">
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                  </Link>
                </li>
                <li>
                  <button className="text-gray-600 hover:text-indigo-600">
                    <svg className="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 17h5l-1.405-1.405A2.032 2.032 0 0118 14.158V11a6.002 6.002 0 00-4-5.659V5a2 2 0 10-4 0v.341C7.67 6.165 6 8.388 6 11v3.159c0 .538-.214 1.055-.595 1.436L4 17h5m6 0v1a3 3 0 11-6 0v-1m6 0H9" />
                    </svg>
                  </button>
                </li>
                <li>
                  <button onClick={toggleLogin} className="bg-red-500 text-white px-4 py-2 rounded-lg hover:bg-red-600 transition-colors">
                    Logout
                  </button>
                </li>
              </>
            ) : (
              <>
                <li>
                  <Link to="/login" className="bg-indigo-600 text-white px-4 py-2 rounded-lg hover:bg-indigo-700 transition-colors">
                    Login
                  </Link>
                </li>
                <li>
                  <Link to="/signup" className="bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600 transition-colors">
                    Sign Up
                  </Link>
                </li>
              </>
            )}
            <li>
              <button
                onClick={toggleLogin}
                className={`px-3 py-1 rounded ${
                  isLoggedIn ? 'bg-red-500 text-white' : 'bg-green-500 text-white'
                }`}
              >
                {isLoggedIn ? 'Simulate Logout' : 'Simulate Login'}
              </button>
            </li>
          </ul>
        </nav>
      </div>
      <PostDealModal isOpen={isPostDealModalOpen} onClose={() => setIsPostDealModalOpen(false)} />
    </header>
  );
}

================
File: app/components/PostDealForm.tsx
================
import { useState } from 'react';

const categories = [
  "Electronics", "Fashion", "Home", "Beauty", "Sports", "Kids", "Auto", "Books", "Grocery", "Travel"
];

interface PostDealFormProps {
  onSubmitSuccess: () => void;
}

export default function PostDealForm({ onSubmitSuccess }: PostDealFormProps) {
  const [step, setStep] = useState(1);
  const [dealUrl, setDealUrl] = useState('');
  const [dealImage, setDealImage] = useState('');
  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [originalPrice, setOriginalPrice] = useState('');
  const [discountPrice, setDiscountPrice] = useState('');
  const [category, setCategory] = useState('');

  const handleUrlSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setDealImage('https://picsum.photos/400/300');
    setStep(2);
  };

  const handleImageUpload = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setDealImage(reader.result as string);
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log({ dealUrl, dealImage, title, description, originalPrice, discountPrice, category });
    onSubmitSuccess();
  };

  return (
    <div className="space-y-6">
      {step === 1 ? (
        <form onSubmit={handleUrlSubmit} className="space-y-6">
          <div>
            <label htmlFor="dealUrl" className="block text-sm font-medium text-gray-700 mb-1">Deal URL</label>
            <div className="mt-1 relative rounded-md shadow-sm">
              <input
                type="url"
                id="dealUrl"
                value={dealUrl}
                onChange={(e) => setDealUrl(e.target.value)}
                className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-3 pr-12 sm:text-sm border-gray-300 rounded-md"
                placeholder="https://example.com/deal"
                required
              />
            </div>
          </div>
          <button type="submit" className="w-full bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition-colors">
            Next
          </button>
        </form>
      ) : (
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="title" className="block text-sm font-medium text-gray-700">Title</label>
            <input
              type="text"
              id="title"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              className="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
              required
            />
          </div>
          <div>
            <label htmlFor="description" className="block text-sm font-medium text-gray-700">Description</label>
            <textarea
              id="description"
              value={description}
              onChange={(e) => setDescription(e.target.value)}
              rows={3}
              className="mt-1 focus:ring-indigo-500 focus:border-indigo-500 block w-full shadow-sm sm:text-sm border-gray-300 rounded-md"
              required
            ></textarea>
          </div>
          <div className="grid grid-cols-2 gap-4">
            <div>
              <label htmlFor="originalPrice" className="block text-sm font-medium text-gray-700">Original Price</label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span className="text-gray-500 sm:text-sm">$</span>
                </div>
                <input
                  type="text"
                  id="originalPrice"
                  value={originalPrice}
                  onChange={(e) => setOriginalPrice(e.target.value)}
                  className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md"
                  placeholder="0.00"
                  required
                />
              </div>
            </div>
            <div>
              <label htmlFor="discountPrice" className="block text-sm font-medium text-gray-700">Discount Price</label>
              <div className="mt-1 relative rounded-md shadow-sm">
                <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                  <span className="text-gray-500 sm:text-sm">$</span>
                </div>
                <input
                  type="text"
                  id="discountPrice"
                  value={discountPrice}
                  onChange={(e) => setDiscountPrice(e.target.value)}
                  className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-7 pr-12 sm:text-sm border-gray-300 rounded-md"
                  placeholder="0.00"
                  required
                />
              </div>
            </div>
          </div>
          <div>
            <label htmlFor="category" className="block text-sm font-medium text-gray-700">Category</label>
            <select
              id="category"
              value={category}
              onChange={(e) => setCategory(e.target.value)}
              className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              required
            >
              <option value="">Select a category</option>
              {categories.map((cat) => (
                <option key={cat} value={cat}>{cat}</option>
              ))}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700">Deal Image</label>
            <div className="mt-1 flex items-center">
              {dealImage ? (
                <img src={dealImage} alt="Deal Preview" className="w-32 h-32 object-cover rounded-lg" />
              ) : (
                <div className="w-32 h-32 bg-gray-200 flex items-center justify-center rounded-lg">
                  <svg className="w-12 h-12 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z" />
                  </svg>
                </div>
              )}
              <label htmlFor="imageUpload" className="ml-5 bg-white py-2 px-3 border border-gray-300 rounded-md shadow-sm text-sm leading-4 font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500">
                Change Image
              </label>
              <input
                id="imageUpload"
                type="file"
                accept="image/*"
                onChange={handleImageUpload}
                className="hidden"
              />
            </div>
          </div>
          <button type="submit" className="w-full bg-indigo-600 text-white py-2 px-4 rounded-lg hover:bg-indigo-700 transition-colors">
            Post Deal
          </button>
        </form>
      )}
    </div>
  );
}

================
File: app/components/PostDealModal.tsx
================
import { useState } from 'react';
import PostDealForm from './PostDealForm';

interface PostDealModalProps {
  isOpen: boolean;
  onClose: () => void;
}

export default function PostDealModal({ isOpen, onClose }: PostDealModalProps) {
  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center p-4 z-50 overflow-y-auto">
      <div className="bg-white rounded-xl shadow-2xl max-w-3xl w-full mx-auto my-8">
        <div className="p-6 lg:p-8 overflow-y-auto max-h-[80vh]">
          <div className="flex justify-between items-center mb-6">
            <h2 className="text-2xl lg:text-3xl font-bold text-gray-800">Post a New Deal</h2>
            <button 
              onClick={onClose}
              className="text-gray-600 hover:text-gray-900 transition-colors"
            >
              <svg className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
          <PostDealForm onSubmitSuccess={onClose} />
        </div>
      </div>
    </div>
  );
}

================
File: app/components/UserProfile.tsx
================
import { useState } from 'react';
import { Link } from '@remix-run/react';
import DealCard from './DealCard';

interface UserProfileProps {
  initialUser: {
    id: string;
    username: string;
    email: string;
    firstName: string;
    lastName: string;
    bio: string;
    avatarUrl: string;
    dealsPosted: number;
    dealsFollowed: number;
    followers: number;
    following: number;
  };
}

// Mock data for posted deals, followed deals, followers, and following
const postedDeals = [
  { id: "1", title: "50% off on Amazon Echo Dot", imageUrl: "https://picsum.photos/seed/1/300/200", price: "$24.99", originalPrice: "$49.99", store: "Amazon", upvotes: 120, description: "Get the latest Amazon Echo Dot at half price! Limited time offer.", followers: 45, purchases: 78, dealUrl: "https://www.amazon.com/echo-dot-deal", postedBy: "DealHunter123" },
  { id: "2", title: "Buy one, get one free at Starbucks", imageUrl: "https://picsum.photos/seed/2/300/200", price: "BOGO", originalPrice: "", store: "Starbucks", upvotes: 85, description: "Buy any grande beverage and get one free!", followers: 30, purchases: 50, dealUrl: "https://www.starbucks.com/promo", postedBy: "CoffeeAddict" },
];

const followedDeals = [
  { id: "3", title: "70% off select Nike shoes", imageUrl: "https://picsum.photos/seed/3/300/200", price: "From $39.99", originalPrice: "$129.99", store: "Nike", upvotes: 200, description: "Huge discounts on select Nike shoes! Don't miss out.", followers: 80, purchases: 120, dealUrl: "https://www.nike.com/deals", postedBy: "SneakerFreak" },
  { id: "4", title: "Free shipping on orders over $50", imageUrl: "https://picsum.photos/seed/4/300/200", price: "Free Shipping", originalPrice: "", store: "Best Buy", upvotes: 65, description: "Get free shipping on all orders over $50 at Best Buy.", followers: 25, purchases: 40, dealUrl: "https://www.bestbuy.com/freeshipping", postedBy: "TechDeals" },
];

const followersList = [
  { id: "1", username: "DealFan1", avatarUrl: "https://picsum.photos/seed/user1/100" },
  { id: "2", username: "BargainHunter", avatarUrl: "https://picsum.photos/seed/user2/100" },
];

const followingList = [
  { id: "1", username: "SuperSaver", avatarUrl: "https://picsum.photos/seed/user3/100" },
  { id: "2", username: "DiscountQueen", avatarUrl: "https://picsum.photos/seed/user4/100" },
];

export default function UserProfile({ initialUser }: UserProfileProps) {
  const [user, setUser] = useState(initialUser);
  const [isEditing, setIsEditing] = useState(false);
  const [activeTab, setActiveTab] = useState('postedDeals');
  const [newPassword, setNewPassword] = useState('');
  const [confirmPassword, setConfirmPassword] = useState('');

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target;
    setUser(prevUser => ({ ...prevUser, [name]: value }));
  };

  const handleAvatarChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const file = e.target.files?.[0];
    if (file) {
      const reader = new FileReader();
      reader.onloadend = () => {
        setUser(prevUser => ({ ...prevUser, avatarUrl: reader.result as string }));
      };
      reader.readAsDataURL(file);
    }
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Here you would typically send the updated user data to your backend
    console.log('Updated user:', user);
    if (newPassword && newPassword === confirmPassword) {
      console.log('New password:', newPassword);
    }
    setIsEditing(false);
    setNewPassword('');
    setConfirmPassword('');
  };

  return (
    <div className="bg-white shadow rounded-lg p-6 max-w-4xl mx-auto">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-bold text-gray-900">User Profile</h2>
        <button
          onClick={() => setIsEditing(!isEditing)}
          className="px-4 py-2 bg-indigo-600 text-white rounded-md hover:bg-indigo-700 transition-colors"
        >
          {isEditing ? 'Cancel' : 'Edit Profile'}
        </button>
      </div>

      <div className="flex flex-col md:flex-row">
        <div className="md:w-1/3 mb-6 md:mb-0">
          <img src={user.avatarUrl} alt={user.username} className="w-32 h-32 rounded-full mx-auto mb-4" />
          {isEditing && (
            <input
              type="file"
              accept="image/*"
              onChange={handleAvatarChange}
              className="text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-indigo-50 file:text-indigo-700 hover:file:bg-indigo-100"
            />
          )}
          <h3 className="text-xl font-semibold text-center mb-2">{user.username}</h3>
          <p className="text-gray-600 text-center mb-4">{user.email}</p>
          <div className="flex justify-center space-x-4 text-sm text-gray-500">
            <span>{user.dealsPosted} deals</span>
            <span>{user.followers} followers</span>
            <span>{user.following} following</span>
          </div>
        </div>

        <div className="md:w-2/3 md:pl-6">
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">First Name</label>
              <input
                type="text"
                id="firstName"
                name="firstName"
                value={user.firstName}
                onChange={handleInputChange}
                disabled={!isEditing}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </div>
            <div>
              <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">Last Name</label>
              <input
                type="text"
                id="lastName"
                name="lastName"
                value={user.lastName}
                onChange={handleInputChange}
                disabled={!isEditing}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
              <input
                type="email"
                id="email"
                name="email"
                value={user.email}
                onChange={handleInputChange}
                disabled={!isEditing}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </div>
            <div>
              <label htmlFor="bio" className="block text-sm font-medium text-gray-700">Bio</label>
              <textarea
                id="bio"
                name="bio"
                value={user.bio}
                onChange={handleInputChange}
                disabled={!isEditing}
                rows={3}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              ></textarea>
            </div>
            {isEditing && (
              <>
                <div>
                  <label htmlFor="newPassword" className="block text-sm font-medium text-gray-700">New Password</label>
                  <input
                    type="password"
                    id="newPassword"
                    value={newPassword}
                    onChange={(e) => setNewPassword(e.target.value)}
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                  />
                </div>
                <div>
                  <label htmlFor="confirmPassword" className="block text-sm font-medium text-gray-700">Confirm New Password</label>
                  <input
                    type="password"
                    id="confirmPassword"
                    value={confirmPassword}
                    onChange={(e) => setConfirmPassword(e.target.value)}
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
                  />
                </div>
              </>
            )}
            {isEditing && (
              <button
                type="submit"
                className="w-full py-2 px-4 bg-indigo-600 hover:bg-indigo-700 text-white rounded-md transition-colors"
              >
                Save Changes
              </button>
            )}
          </form>

          <div className="mt-8">
            <div className="border-b border-gray-200">
              <nav className="-mb-px flex space-x-8" aria-label="Tabs">
                {['postedDeals', 'followedDeals', 'followers', 'following'].map((tab) => (
                  <button
                    key={tab}
                    onClick={() => setActiveTab(tab)}
                    className={`${
                      activeTab === tab
                        ? 'border-indigo-500 text-indigo-600'
                        : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                    } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
                  >
                    {tab === 'postedDeals' ? 'Posted Deals' : tab === 'followedDeals' ? 'Followed Deals' : tab.charAt(0).toUpperCase() + tab.slice(1)}
                  </button>
                ))}
              </nav>
            </div>

            <div className="mt-4">
              {activeTab === 'postedDeals' && (
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  {postedDeals.map(deal => (
                    <DealCard key={deal.id} {...deal} />
                  ))}
                </div>
              )}
              {activeTab === 'followedDeals' && (
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  {followedDeals.map(deal => (
                    <DealCard key={deal.id} {...deal} />
                  ))}
                </div>
              )}
              {activeTab === 'followers' && (
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                  {followersList.map(follower => (
                    <Link key={follower.id} to={`/user/${follower.id}`} className="flex flex-col items-center">
                      <img src={follower.avatarUrl} alt={follower.username} className="w-16 h-16 rounded-full mb-2" />
                      <span className="text-sm text-gray-700">{follower.username}</span>
                    </Link>
                  ))}
                </div>
              )}
              {activeTab === 'following' && (
                <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-4">
                  {followingList.map(following => (
                    <Link key={following.id} to={`/user/${following.id}`} className="flex flex-col items-center">
                      <img src={following.avatarUrl} alt={following.username} className="w-16 h-16 rounded-full mb-2" />
                      <span className="text-sm text-gray-700">{following.username}</span>
                    </Link>
                  ))}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/entry.client.tsx
================
/**
 * By default, Remix will handle hydrating your app on the client for you.
 * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ‚ú®
 * For more information, see https://remix.run/file-conventions/entry.client
 */

import { RemixBrowser } from "@remix-run/react";
import { startTransition, StrictMode } from "react";
import { hydrateRoot } from "react-dom/client";

startTransition(() => {
  hydrateRoot(
    document,
    <StrictMode>
      <RemixBrowser />
    </StrictMode>
  );
});

================
File: app/entry.server.tsx
================
/**
 * By default, Remix will handle generating the HTTP Response for you.
 * You are free to delete this file if you'd like to, but if you ever want it revealed again, you can run `npx remix reveal` ‚ú®
 * For more information, see https://remix.run/file-conventions/entry.server
 */

import { PassThrough } from "node:stream";

import type { AppLoadContext, EntryContext } from "@remix-run/node";
import { createReadableStreamFromReadable } from "@remix-run/node";
import { RemixServer } from "@remix-run/react";
import { isbot } from "isbot";
import { renderToPipeableStream } from "react-dom/server";

const ABORT_DELAY = 5_000;

export default function handleRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext,
  // This is ignored so we can keep it in the template for visibility.  Feel
  // free to delete this parameter in your app if you're not using it!
  // eslint-disable-next-line @typescript-eslint/no-unused-vars
  loadContext: AppLoadContext
) {
  return isbot(request.headers.get("user-agent") || "")
    ? handleBotRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      )
    : handleBrowserRequest(
        request,
        responseStatusCode,
        responseHeaders,
        remixContext
      );
}

function handleBotRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onAllReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

function handleBrowserRequest(
  request: Request,
  responseStatusCode: number,
  responseHeaders: Headers,
  remixContext: EntryContext
) {
  return new Promise((resolve, reject) => {
    let shellRendered = false;
    const { pipe, abort } = renderToPipeableStream(
      <RemixServer
        context={remixContext}
        url={request.url}
        abortDelay={ABORT_DELAY}
      />,
      {
        onShellReady() {
          shellRendered = true;
          const body = new PassThrough();
          const stream = createReadableStreamFromReadable(body);

          responseHeaders.set("Content-Type", "text/html");

          resolve(
            new Response(stream, {
              headers: responseHeaders,
              status: responseStatusCode,
            })
          );

          pipe(body);
        },
        onShellError(error: unknown) {
          reject(error);
        },
        onError(error: unknown) {
          responseStatusCode = 500;
          // Log streaming rendering errors from inside the shell.  Don't log
          // errors encountered during initial shell rendering since they'll
          // reject and get logged in handleDocumentRequest.
          if (shellRendered) {
            console.error(error);
          }
        },
      }
    );

    setTimeout(abort, ABORT_DELAY);
  });
}

================
File: app/lib/utils.ts
================
export function cn(...classes: string[]) {
    return classes.filter(Boolean).join(' ')
  }

================
File: app/root.tsx
================
import type { LinksFunction, LoaderFunction } from "@remix-run/node";
import { json } from "@remix-run/node";
import {
  Links,
  LiveReload,
  Meta,
  Outlet,
  Scripts,
  ScrollRestoration,
  useLoaderData,
  useLocation,
} from "@remix-run/react";
import Header from "./components/Header";
import { getSession } from "./sessions";

import "./tailwind.css";

export const links: LinksFunction = () => [
  // Add any additional stylesheets here
];

export const loader: LoaderFunction = async ({ request }) => {
  const session = await getSession(request.headers.get("Cookie"));
  const isLoggedIn = session.get("isLoggedIn") || false;

  return json({ isLoggedIn });
};

export default function App() {
  const { isLoggedIn } = useLoaderData<{ isLoggedIn: boolean }>();
  const location = useLocation();

  const isAuthPage = location.pathname === "/login" || location.pathname === "/signup";

  return (
    <html lang="en" className="h-full">
      <head>
        <meta charSet="utf-8" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <Meta />
        <Links />
      </head>
      <body className="h-full">
        {!isAuthPage && <Header />}
        <Outlet />
        <ScrollRestoration />
        <Scripts />
        <LiveReload />
      </body>
    </html>
  );
}

================
File: app/routes/_index.tsx
================
import type { MetaFunction } from "@remix-run/node";
import DealGrid from "~/components/DealGrid";

export const meta: MetaFunction = () => {
  return [
    { title: "Best Deals Online" },
    { name: "description", content: "Find the best deals online!" },
  ];
};

export default function Index() {
  return (
    <div className="bg-gradient-to-br from-primary-900 via-primary-800 to-secondary-900 min-h-screen text-white overflow-auto">
      <main className="container mx-auto px-4 py-8">
        <DealGrid />
      </main>
    </div>
  );
}

================
File: app/routes/admin.deals.tsx
================
import { useState } from 'react';

// Mock data
const deals = [
  { id: '1', title: '50% off on Amazon Echo Dot', store: 'Amazon', status: 'active' },
  { id: '2', title: 'Buy one, get one free at Starbucks', store: 'Starbucks', status: 'pending' },
];

export default function ManageDeals() {
  const [searchTerm, setSearchTerm] = useState('');

  const filteredDeals = deals.filter(deal => 
    deal.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
    deal.store.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleDelete = (id: string) => {
    // Implement delete logic here
    console.log(`Delete deal with id: ${id}`);
  };

  return (
    <div>
      <h2 className="text-2xl font-bold mb-4">Manage Deals</h2>
      <input
        type="text"
        placeholder="Search deals..."
        className="w-full p-2 mb-4 border rounded"
        value={searchTerm}
        onChange={(e) => setSearchTerm(e.target.value)}
      />
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Title</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Store</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {filteredDeals.map((deal) => (
            <tr key={deal.id}>
              <td className="px-6 py-4 whitespace-nowrap">{deal.title}</td>
              <td className="px-6 py-4 whitespace-nowrap">{deal.store}</td>
              <td className="px-6 py-4 whitespace-nowrap">{deal.status}</td>
              <td className="px-6 py-4 whitespace-nowrap">
                <button 
                  onClick={() => handleDelete(deal.id)}
                  className="text-red-600 hover:text-red-900"
                >
                  Delete
                </button>
              </td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

================
File: app/routes/admin.tsx
================
import { useState } from 'react';
import { Link, Outlet } from '@remix-run/react';

export default function AdminPanel() {
  const [activeTab, setActiveTab] = useState('deals');

  const tabs = [
    { id: 'deals', label: 'Manage Deals' },
    { id: 'users', label: 'Manage Users' },
    { id: 'comments', label: 'Manage Comments' },
    { id: 'categories', label: 'Manage Categories' },
  ];

  return (
    <div className="bg-gray-100 min-h-screen">
      <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <h1 className="text-3xl font-bold text-gray-900 mb-6">Admin Panel</h1>
        <div className="bg-white shadow overflow-hidden sm:rounded-lg">
          <div className="border-b border-gray-200">
            <nav className="-mb-px flex">
              {tabs.map((tab) => (
                <Link
                  key={tab.id}
                  to={`/admin/${tab.id}`}
                  className={`${
                    activeTab === tab.id
                      ? 'border-indigo-500 text-indigo-600'
                      : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                  } whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm`}
                  onClick={() => setActiveTab(tab.id)}
                >
                  {tab.label}
                </Link>
              ))}
            </nav>
          </div>
          <div className="p-6">
            <Outlet />
          </div>
        </div>
      </div>
    </div>
  );
}

================
File: app/routes/login.tsx
================
import { useState } from 'react';
import { Link } from '@remix-run/react';

export default function Login() {
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Handle login logic here
    console.log('Login attempt with:', { email, password });
  };

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-indigo-500 to-purple-600 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl overflow-hidden max-w-md w-full">
        <div className="p-8">
          <h2 className="text-3xl font-bold text-center text-gray-800 mb-2">Welcome Back!</h2>
          <p className="text-center text-gray-600 mb-8">Exciting new deals await your discovery!</p>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                required
              />
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">Password</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                required
              />
            </div>
            <div>
              <button
                type="submit"
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
              >
                Log In
              </button>
            </div>
          </form>
        </div>
        <div className="px-8 py-4 bg-gray-50 border-t border-gray-200 flex flex-col sm:flex-row justify-between items-center">
          <p className="text-xs text-gray-600 mb-2 sm:mb-0">Don't have an account?</p>
          <Link to="/signup" className="text-sm font-medium text-indigo-600 hover:text-indigo-500">
            Sign up now
          </Link>
        </div>
      </div>
    </div>
  );
}

================
File: app/routes/profile.tsx
================
import type { MetaFunction } from "@remix-run/node";
import UserProfile from "~/components/UserProfile";

export const meta: MetaFunction = () => {
  return [
    { title: "User Profile - DealzMix" },
    { name: "description", content: "Edit your DealzMix user profile" },
  ];
};

// Mock user data - in a real app, you'd fetch this from your backend
const mockUser = {
  id: "1",
  username: "DealHunter123",
  email: "dealhunter@example.com",
  firstName: "John",
  lastName: "Doe",
  bio: "I love finding and sharing great deals!",
  avatarUrl: "https://picsum.photos/seed/user1/200",
  dealsPosted: 15,
  dealsFollowed: 30,
  followers: 50,
  following: 25,
};

export default function Profile() {
  return (
    <div className="container mx-auto px-4 py-8">
      <UserProfile initialUser={mockUser} />
    </div>
  );
}

================
File: app/routes/signup.tsx
================
import { useState } from 'react';
import { Link } from '@remix-run/react';

export default function Signup() {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    // Handle signup logic here
    console.log('Signup attempt with:', { username, email, password });
  };

  return (
    <div className="min-h-screen w-full bg-gradient-to-br from-green-400 to-blue-500 flex items-center justify-center p-4">
      <div className="bg-white rounded-lg shadow-xl overflow-hidden max-w-md w-full">
        <div className="p-8">
          <h2 className="text-3xl font-bold text-center text-gray-800 mb-2">Join Us Today!</h2>
          <p className="text-center text-gray-600 mb-8">Unlock a world of incredible deals and savings!</p>
          <form onSubmit={handleSubmit} className="space-y-6">
            <div>
              <label htmlFor="username" className="block text-sm font-medium text-gray-700">Username</label>
              <input
                type="text"
                id="username"
                value={username}
                onChange={(e) => setUsername(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                required
              />
            </div>
            <div>
              <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
              <input
                type="email"
                id="email"
                value={email}
                onChange={(e) => setEmail(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                required
              />
            </div>
            <div>
              <label htmlFor="password" className="block text-sm font-medium text-gray-700">Password</label>
              <input
                type="password"
                id="password"
                value={password}
                onChange={(e) => setPassword(e.target.value)}
                className="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500"
                required
              />
            </div>
            <div>
              <button
                type="submit"
                className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
              >
                Sign Up
              </button>
            </div>
          </form>
        </div>
        <div className="px-8 py-4 bg-gray-50 border-t border-gray-200 flex flex-col sm:flex-row justify-between items-center">
          <p className="text-xs text-gray-600 mb-2 sm:mb-0">Already have an account?</p>
          <Link to="/login" className="text-sm font-medium text-green-600 hover:text-green-500">
            Log in here
          </Link>
        </div>
      </div>
    </div>
  );
}

================
File: app/routes/toggle-login.tsx
================
import { json, ActionFunction } from "@remix-run/node";
import { getSession, commitSession } from "~/sessions";

export const action: ActionFunction = async ({ request }) => {
  const session = await getSession(request.headers.get("Cookie"));
  const formData = await request.formData();
  const isLoggedIn = formData.get("isLoggedIn") === "true";

  session.set("isLoggedIn", isLoggedIn);

  return json(
    { isLoggedIn },
    {
      headers: {
        "Set-Cookie": await commitSession(session),
      },
    }
  );
};

================
File: app/sessions.ts
================
import { createCookieSessionStorage } from "@remix-run/node";

const { getSession, commitSession, destroySession } =
  createCookieSessionStorage({
    cookie: {
      name: "__session",
      httpOnly: true,
      maxAge: 60 * 60 * 24 * 7, // 1 week
      path: "/",
      sameSite: "lax",
      secrets: ["s3cr3t"], // replace with a real secret
      secure: process.env.NODE_ENV === "production",
    },
  });

export { getSession, commitSession, destroySession };

================
File: app/tailwind.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Remove any global styles that might interfere with full-width layouts */

================
File: package.json
================
{
  "name": "c-users-home-documents-dealz-mix",
  "private": true,
  "sideEffects": false,
  "type": "module",
  "scripts": {
    "build": "remix vite:build",
    "dev": "remix vite:dev",
    "lint": "eslint --ignore-path .gitignore --cache --cache-location ./node_modules/.cache/eslint .",
    "start": "remix-serve ./build/server/index.js",
    "typecheck": "tsc"
  },
  "dependencies": {
    "@headlessui/react": "^2.1.8",
    "@radix-ui/react-avatar": "^1.1.0",
    "@radix-ui/react-dialog": "^1.1.1",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@remix-run/css-bundle": "^2.12.1",
    "@remix-run/node": "^2.12.1",
    "@remix-run/react": "^2.12.1",
    "@remix-run/serve": "^2.12.1",
    "@tailwindcss/forms": "^0.5.9",
    "@tailwindcss/line-clamp": "^0.4.4",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "isbot": "^4.1.0",
    "lucide-react": "^0.441.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "tailwind-merge": "^2.5.2",
    "tailwindcss-animate": "^1.0.7"
  },
  "devDependencies": {
    "@remix-run/dev": "^2.12.1",
    "@shadcn/ui": "^0.0.4",
    "@types/node": "^22.5.5",
    "@types/react": "^18.2.20",
    "@types/react-dom": "^18.2.7",
    "@typescript-eslint/eslint-plugin": "^6.7.4",
    "@typescript-eslint/parser": "^6.7.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.38.0",
    "eslint-import-resolver-typescript": "^3.6.1",
    "eslint-plugin-import": "^2.28.1",
    "eslint-plugin-jsx-a11y": "^6.7.1",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "postcss": "^8.4.47",
    "tailwindcss": "^3.4.12",
    "typescript": "^5.1.6",
    "vite": "^5.1.0",
    "vite-tsconfig-paths": "^4.2.1"
  },
  "engines": {
    "node": ">=20.0.0"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
};

================
File: README.md
================
# Welcome to Remix!

- üìñ [Remix docs](https://remix.run/docs)

## Development

Run the dev server:

```shellscript
npm run dev
```

## Deployment

First, build your app for production:

```sh
npm run build
```

Then run the app in production mode:

```sh
npm start
```

Now you'll need to pick a host to deploy it to.

### DIY

If you're familiar with deploying Node applications, the built-in Remix app server is production-ready.

Make sure to deploy the output of `npm run build`

- `build/server`
- `build/client`

## Styling

This template comes with [Tailwind CSS](https://tailwindcss.com/) already configured for a simple default starting experience. You can use whatever css framework you prefer. See the [Vite docs on css](https://vitejs.dev/guide/features.html#css) for more information.

================
File: remix.config.js
================
/** @type {import('@remix-run/dev').AppConfig} */
export default {
  ignoredRouteFiles: ["**/.*"],
  serverModuleFormat: "esm",
  tailwind: true,
  postcss: true,
};

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: ['./app/**/*.{js,jsx,ts,tsx}'],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

export default {
  content: ["./app/**/*.{js,jsx,ts,tsx}"],
  theme: {
    extend: {
      fontFamily: {
        sans: ['Inter', 'ui-sans-serif', 'system-ui', 'sans-serif'],
      },
      colors: {
        'primary': {
          50: '#f0f9ff',
          100: '#e0f2fe',
          200: '#bae6fd',
          300: '#7dd3fc',
          400: '#38bdf8',
          500: '#0ea5e9',
          600: '#0284c7',
          700: '#0369a1',
          800: '#075985',
          900: '#0c4a6e',
        },
        'secondary': {
          50: '#fff7ed',
          100: '#ffedd5',
          200: '#fed7aa',
          300: '#fdba74',
          400: '#fb923c',
          500: '#f97316',
          600: '#ea580c',
          700: '#c2410c',
          800: '#9a3412',
          900: '#7c2d12',
        },
      },
      boxShadow: {
        'neon': '0 0 5px theme("colors.primary.400"), 0 0 20px theme("colors.primary.700")',
      },
    },
  },
  plugins: [],
} satisfies Config;

================
File: tsconfig.json
================
{
  "include": [
    "**/*.ts",
    "**/*.tsx",
    "**/.server/**/*.ts",
    "**/.server/**/*.tsx",
    "**/.client/**/*.ts",
    "**/.client/**/*.tsx"
  ],
  "compilerOptions": {
    "lib": ["DOM", "DOM.Iterable", "ES2022"],
    "types": ["@remix-run/node", "vite/client"],
    "isolatedModules": true,
    "esModuleInterop": true,
    "jsx": "react-jsx",
    "module": "ESNext",
    "moduleResolution": "Bundler",
    "resolveJsonModule": true,
    "target": "ES2022",
    "strict": true,
    "allowJs": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true,
    "baseUrl": ".",
    "paths": {
      "~/*": ["./app/*"]
    },

    // Vite takes care of building everything, not tsc.
    "noEmit": true
  }
}

================
File: vite.config.js
================
import { defineConfig } from 'vite';
import { vitePlugin as remix } from '@remix-run/dev';
import tsconfigPaths from 'vite-tsconfig-paths';

export default defineConfig({
  plugins: [remix(), tsconfigPaths()],
});

================
File: vite.config.js.timestamp-1726860760683-1638d460209c.mjs
================
// vite.config.js
import { defineConfig } from "file:///C:/Users/HOME/Documents/Dealz/mix/node_modules/vite/dist/node/index.js";
import { vitePlugin as remix } from "file:///C:/Users/HOME/Documents/Dealz/mix/node_modules/@remix-run/dev/dist/index.js";
import tsconfigPaths from "file:///C:/Users/HOME/Documents/Dealz/mix/node_modules/vite-tsconfig-paths/dist/index.mjs";
var vite_config_default = defineConfig({
  plugins: [remix(), tsconfigPaths()]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcuanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxIT01FXFxcXERvY3VtZW50c1xcXFxEZWFselxcXFxtaXhcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXEhPTUVcXFxcRG9jdW1lbnRzXFxcXERlYWx6XFxcXG1peFxcXFx2aXRlLmNvbmZpZy5qc1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvSE9NRS9Eb2N1bWVudHMvRGVhbHovbWl4L3ZpdGUuY29uZmlnLmpzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSAndml0ZSc7XHJcbmltcG9ydCB7IHZpdGVQbHVnaW4gYXMgcmVtaXggfSBmcm9tICdAcmVtaXgtcnVuL2Rldic7XHJcbmltcG9ydCB0c2NvbmZpZ1BhdGhzIGZyb20gJ3ZpdGUtdHNjb25maWctcGF0aHMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lQ29uZmlnKHtcclxuICBwbHVnaW5zOiBbcmVtaXgoKSwgdHNjb25maWdQYXRocygpXSxcclxufSk7Il0sCiAgIm1hcHBpbmdzIjogIjtBQUFpUyxTQUFTLG9CQUFvQjtBQUM5VCxTQUFTLGNBQWMsYUFBYTtBQUNwQyxPQUFPLG1CQUFtQjtBQUUxQixJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixTQUFTLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQztBQUNwQyxDQUFDOyIsCiAgIm5hbWVzIjogW10KfQo=

================
File: vite.config.mjs
================
import { defineConfig } from "vite";
import { vitePlugin as remix } from "@remix-run/dev";
import tsconfigPaths from "vite-tsconfig-paths";

export default defineConfig({
  plugins: [remix(), tsconfigPaths()],
});

================
File: vite.config.ts
================
import { defineConfig } from "vite";
import { vitePlugin as remix } from "@remix-run/dev";
import tsconfigPaths from "vite-tsconfig-paths";

export default defineConfig({
  plugins: [remix(), tsconfigPaths()],
});

================
File: vite.config.ts.timestamp-1726859134184-d93de3f2dc511.mjs
================
// vite.config.ts
import { defineConfig } from "file:///C:/Users/HOME/Documents/Dealz/mix/node_modules/vite/dist/node/index.js";
import { vitePlugin as remix } from "file:///C:/Users/HOME/Documents/Dealz/mix/node_modules/@remix-run/dev/dist/index.js";
import tsconfigPaths from "file:///C:/Users/HOME/Documents/Dealz/mix/node_modules/vite-tsconfig-paths/dist/index.mjs";
var vite_config_default = defineConfig({
  plugins: [remix(), tsconfigPaths()]
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImNvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9kaXJuYW1lID0gXCJDOlxcXFxVc2Vyc1xcXFxIT01FXFxcXERvY3VtZW50c1xcXFxEZWFselxcXFxtaXhcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZmlsZW5hbWUgPSBcIkM6XFxcXFVzZXJzXFxcXEhPTUVcXFxcRG9jdW1lbnRzXFxcXERlYWx6XFxcXG1peFxcXFx2aXRlLmNvbmZpZy50c1wiO2NvbnN0IF9fdml0ZV9pbmplY3RlZF9vcmlnaW5hbF9pbXBvcnRfbWV0YV91cmwgPSBcImZpbGU6Ly8vQzovVXNlcnMvSE9NRS9Eb2N1bWVudHMvRGVhbHovbWl4L3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnIH0gZnJvbSBcInZpdGVcIjtcbmltcG9ydCB7IHZpdGVQbHVnaW4gYXMgcmVtaXggfSBmcm9tIFwiQHJlbWl4LXJ1bi9kZXZcIjtcbmltcG9ydCB0c2NvbmZpZ1BhdGhzIGZyb20gXCJ2aXRlLXRzY29uZmlnLXBhdGhzXCI7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZmluZUNvbmZpZyh7XG4gIHBsdWdpbnM6IFtyZW1peCgpLCB0c2NvbmZpZ1BhdGhzKCldLFxufSk7XG4iXSwKICAibWFwcGluZ3MiOiAiO0FBQWlTLFNBQVMsb0JBQW9CO0FBQzlULFNBQVMsY0FBYyxhQUFhO0FBQ3BDLE9BQU8sbUJBQW1CO0FBRTFCLElBQU8sc0JBQVEsYUFBYTtBQUFBLEVBQzFCLFNBQVMsQ0FBQyxNQUFNLEdBQUcsY0FBYyxDQUFDO0FBQ3BDLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
